generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole @default(JOB_SEEKER)
  company           String?
  bio               String?
  skills            String?
  experience        String?
  avatar            String?
  resume            String?
  location          String?
  phone             String?
  website           String?
  education         String?
  interests         String?
  languages         String?
  certifications    String?
  projects          String?
  linkedin          String?
  github            String?
  portfolio         String?
  yearsOfExperience Int?
  preferredWorkType String?
  salaryExpectation String?
  availability      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  jobsPosted        Job[]
  applications      Application[]

  @@map("users")
}

model Job {
  id          String   @id @default(uuid())
  title       String
  description String
  location    String?
  salary      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employerId  String
  employer    User         @relation(fields: [employerId], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("jobs")
}

model Application {
  id            String            @id @default(uuid())
  coverLetter   String?
  resumeFilename String?
  resumeUrl     String?
  status        ApplicationStatus @default(PENDING)
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  applicantId   String
  applicant     User @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  jobId         String
  job           Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("applications")
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact")
}

enum UserRole {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  REJECTED
  HIRED
} 